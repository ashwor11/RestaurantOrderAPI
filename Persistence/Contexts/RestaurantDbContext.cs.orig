using Core.Security.Entities;
using Domain.Entities;
using Domain.Entities.AbstractEntities;
using Domain.Entities.CrossTableEntities;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;


namespace Persistence.Contexts
{
    public class RestaurantDbContext : DbContext
    {
        public IConfiguration _configuration { get; set; }
        public DbSet<Owner> Owners{ get; set; }
        public DbSet<Restaurant> Restaurants{ get; set; }
        public DbSet<Menu> Menus { get; set; }
        public DbSet<FoodCategory> FoodCategories { get; set; }
        public DbSet<DrinkCategory> DrinkCategories { get; set; }
        public DbSet<Food> Foods { get; set; }
        public DbSet<Drink> Drinks { get; set; }
        public DbSet<RefreshToken> RefreshTokens{ get; set; }
        public DbSet<Table> Tables { get; set; }
        public DbSet<Order> Orders { get; set; }
        public DbSet<OrderedProduct> OrderedProducts { get; set; }
        public DbSet<EmailVertificator> EmailVertificators { get; set; }
        public DbSet<OtpVerificator> OtpVertificators { get; set; }


        public RestaurantDbContext(DbContextOptions options, IConfiguration configuration) : base(options)
        {
            _configuration = configuration;
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            //
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(typeof(RestaurantDbContext).Assembly);

            modelBuilder.Entity<Product>().UseTpcMappingStrategy();
            modelBuilder.Entity<Category>().UseTpcMappingStrategy();

            modelBuilder.Entity<Restaurant>(r =>
            {
                r.HasOne(r => r.Owner)
                .WithMany()
                .HasForeignKey(r =>r.OwnerId);

                r.HasOne(r => r.Menu)
                    .WithOne(m => m.Resturant);


            });

            modelBuilder.Entity<Table>(t =>
            {
                t.HasKey(t => t.Id);
                t.HasOne(t => t.Restaurant)
                    .WithMany(r => r.Tables)
                    .HasForeignKey(t => t.RestaurantId);
                t.HasOne(t => t.CurrentOrder)
                    .WithOne()
                    .HasForeignKey<Table>(t => t.OrderId)
                    .IsRequired(false)
                    .OnDelete(DeleteBehavior.SetNull);

            });

            modelBuilder.Entity<Order>(o =>
            {
                o.HasOne(o => o.Table)
                    .WithMany(t => t.Orders)
                    .HasForeignKey(o => o.TableId)
                    .OnDelete(DeleteBehavior.Restrict);
            });

            modelBuilder.Entity<OrderedProduct>(o =>
            {
                o.HasOne(o => o.Product)
                    .WithMany()
                    .HasForeignKey(o => o.ProductId);
            });

            modelBuilder.Entity<Menu>(m =>
            {
                m.HasMany(m => m.Drinks)
                 .WithOne(c => c.Menu)
                 .HasForeignKey(c => c.MenuId);

                m.HasMany(m => m.Foods)
                .WithOne(c => c.Menu)
                .HasForeignKey(c => c.MenuId);

                m.HasOne(m => m.Resturant)
                    .WithOne(r => r.Menu);

            });

            modelBuilder.Entity<FoodCategory>(c =>
            {
                c.HasMany(c => c.Foods)
                .WithOne(f => f.FoodCategory);

               
            });

            modelBuilder.Entity<DrinkCategory>(c =>
            {
                c.HasMany(c => c.Drinks)
                .WithOne(f => f.DrinkCategory);


            });


            modelBuilder.Entity<Food>(f =>
            {

                f.HasOne(f => f.FoodCategory)
                .WithMany(c => c.Foods);
            });

            modelBuilder.Entity<Drink>(d =>
            {

                d.HasOne(d => d.DrinkCategory)
                .WithMany(c => c.Drinks)
                .OnDelete(DeleteBehavior.Cascade);

            });

            modelBuilder.Entity<Owner>(o =>
            {
                o.HasMany(o => o.Restaurants)
                .WithOne(r => r.Owner);
            });

<<<<<<< HEAD
            modelBuilder.Entity<OtpVerificator>(o =>
            {
                o.HasOne(o => o.User);
            });

            modelBuilder.Entity<EmailVertificator>(e =>
            {
                e.HasOne(e => e.User);
            });


=======
            
>>>>>>> origin/master



        }
    }
}
